'''
N×M크기의 배열로 표현되는 미로가 있다.

1	0	1	1	1	1
1	0	1	0	1	0
1	0	1	0	1	1
1	1	1	0	1	1
미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.

위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.

입력
첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.

출력
첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.

예제 입력 1 
4 6
101111
101010
101011
111011
예제 출력 1 
15
예제 입력 2 
4 6
110110
110110
111111
111101
예제 출력 2 
9
예제 입력 3 
2 25
1011101110111011101110111
1110111011101110111011101
예제 출력 3 
38
예제 입력 4 
7 7
1011111
1110001
1000001
1000001
1000001
1000001
1111111
예제 출력 4 
13
'''

from collections import deque
N, M = map(int, input().split())

array=[]
for i in range(N):
    row = list(map(int, input()))
    array.append(row)


#너비우선 탐색
def bfs(x, y):
    # 이동할 네 가지 방향 정의 (상, 하, 좌, 우)
    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]

    queue=deque()
    queue.append((x, y))
    '''
    다음과 같은 형식으로 작성하면 안됨 : deque 객체 생성 시 올바른 형태로 초기화되지 않음
    -> queue.append((x,y)) (x, y)라는 튜플을 큐(queue)에 추가하는 코드입니다.
    이렇게 작성해야 함
    -> queue = deque([(x, y)]) : deque 객체를 초기화할 때는 iterable한 객체를 전달해야 합니다. 
    따라서, deque 객체를 생성할 때는 반드시 iterable한 형태로 전달해야 합니다. 예를 들어, deque([(x, y)])와 같이 리스트 형태로 감싸주어야 합니다.
    
    deque에 초기값으로 튜플을 전달할 때, 이를 반복 가능한 형태로 만들어야 합니다. 
    리스트는 반복 가능한 객체이므로, 튜플을 리스트로 감싸서 deque에 전달하면 
    deque 객체가 올바르게 초기화됩니다.
    반복 가능한 형태(iterable)란 파이썬에서 for 루프 등에서 반복(iteration)을 수행할 수 있는 객체를 말합니다. 
    즉, 객체 내부의 요소들을 하나씩 차례대로 접근할 수 있는 객체를 의미합니다.
    '''
    

    #큐안에 데이터가없을때까지 반복
    while queue:
        x, y = queue.popleft()

        for i in range(4):
            nx = x + dx[i]
            ny = y+ dy[i]

            #위치가 벗어나면 안되기 때문에 조건추가
            if(nx < 0 or nx>=N or ny<0 or ny>=M):
                continue

            if(array[nx][ny]==1):
                array[nx][ny] = array[x][y] + 1
                queue.append((nx, ny))
            else:
                continue
    
    '''
    return 문이 실행되면 함수가 즉시 종료됩니다.
    return 문은 함수에서 값을 반환하고 함수의 실행을 종료하는 역할을 합니다. 
    따라서, return 문이 실행되면 현재 실행 중인 함수인 bfs 함수가 종료되고, 
    이로 인해 while 문도 종료됩니다. 
    '''
    return array[N-1][M-1]

print(bfs(0, 0))