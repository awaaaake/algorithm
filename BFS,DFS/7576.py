'''
문제
철수의 토마토 농장에서는 토마토를 보관하는 큰 창고를 가지고 있다. 토마토는 아래의 그림과 같이 격자 모양 상자의 칸에 하나씩 넣어서 창고에 보관한다. 



창고에 보관되는 토마토들 중에는 잘 익은 것도 있지만, 아직 익지 않은 토마토들도 있을 수 있다. 
보관 후 하루가 지나면, 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토들은 익은 토마토의 영향을 받아 익게 된다. 
하나의 토마토의 인접한 곳은 왼쪽, 오른쪽, 앞, 뒤 네 방향에 있는 토마토를 의미한다. 대각선 방향에 있는 토마토들에게는 영향을 주지 못하며, 
토마토가 혼자 저절로 익는 경우는 없다고 가정한다. 철수는 창고에 보관된 토마토들이 며칠이 지나면 다 익게 되는지, 그 최소 일수를 알고 싶어 한다.

토마토를 창고에 보관하는 격자모양의 상자들의 크기와 익은 토마토들과 익지 않은 토마토들의 정보가 주어졌을 때, 
며칠이 지나면 토마토들이 모두 익는지, 그 최소 일수를 구하는 프로그램을 작성하라. 단, 상자의 일부 칸에는 토마토가 들어있지 않을 수도 있다.

입력
첫 줄에는 상자의 크기를 나타내는 두 정수 M,N이 주어진다. M은 상자의 가로 칸의 수, N은 상자의 세로 칸의 수를 나타낸다. 단, 2 ≤ M,N ≤ 1,000 이다. 
둘째 줄부터는 하나의 상자에 저장된 토마토들의 정보가 주어진다. 즉, 둘째 줄부터 N개의 줄에는 상자에 담긴 토마토의 정보가 주어진다. 
하나의 줄에는 상자 가로줄에 들어있는 토마토의 상태가 M개의 정수로 주어진다. 
정수 1은 익은 토마토, 정수 0은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸을 나타낸다.

토마토가 하나 이상 있는 경우만 입력으로 주어진다.

출력
여러분은 토마토가 모두 익을 때까지의 최소 날짜를 출력해야 한다. 
만약, 저장될 때부터 모든 토마토가 익어있는 상태이면 0을 출력해야 하고, 토마토가 모두 익지는 못하는 상황이면 -1을 출력해야 한다.

예제 입력 1 
6 4
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 1
예제 출력 1 
8
예제 입력 2 
6 4
0 -1 0 0 0 0
-1 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 1
예제 출력 2 
-1
예제 입력 3 
6 4
1 -1 0 0 0 0
0 -1 0 0 0 0
0 0 0 0 -1 0
0 0 0 0 -1 1
예제 출력 3 
6
예제 입력 4 
5 5
-1 1 0 0 0
0 -1 -1 -1 0
0 -1 -1 -1 0
0 -1 -1 -1 0
0 0 0 0 0
예제 출력 4 
14
예제 입력 5 
2 2
1 -1
-1 1
예제 출력 5 
0
'''

from collections import deque

M, N=map(int, input().split())
array=[]
queue=deque([])
# 정답이 담길 변수
res = 0

for i in range(N):
    row=list(map(int, input().split()))
    array.append(row)
    for j in range(M):
            if(array[i][j]==1): #익은 토마토 큐에 저장
                queue.append((i,j))   

#너비우선 탐색 
def bfs():
    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]
    
    while queue:
        x, y = queue.popleft()

        for i in range(4):
            nx=x+dx[i]
            ny=y+dy[i]

            #범위를 벗어나면 다른방향으로
            if(nx<0 or nx>=N or ny<0 or ny>=M):
                continue
            
            #방문 표시가 필요없는게, 그냥 안익은 토마토로만 가면됨
            if(array[nx][ny]==0):
                array[nx][ny] = array[x][y] + 1 
                '''
                하루치 익어야하는 토마토를 따로 큐에 저장하지 않고, 
                그냥 그 토마토를 큐에 추가함과 동시에 배열값을 +1 해서 
                하루가 지낫음을 표시해서 구분(2면 둘째날, 3이면 셋째날)
                '''
                queue.append((nx,ny))
                #안익은토마토를 익은토마토로 굳이 바꾸지말고, 그냥 그 경로에서 익혀야하는 토마토를 count를 해가면됨

bfs()
for i in array:
    for j in i: #j는 자바에서와 달리, 인덱스가아니라 배열에서 꺼낸 값 자체
          #다 돌았는데 익지 않은 토마토가 있다면 -1
          if j==0:
               print(-1)
               exit(0)
    #다 익혔다면 최댓값이 정답
    res = max(res,max(i)) #줄마다 i리스트에서 최댓값을 res에 담기(그 전 행의 최댓값과 비교해서)
# 처음 시작을 1로 표현했으니 1을 빼준다. 만약에 첨부터 전부 익어있으면 res가 1이므로 결과는 0이됨
print(res - 1)

'''
파이썬에서 2차원 배열의 원소 순회하는 방법:
i는 각 행을 의미합니다.
for j in i:는 i에 할당된 행의 각 요소를 순회하면서 j에 해당 요소를 할당하는 구문입니다. 
이렇게 하면 각 행의 요소를 순차적으로 접근할 수 있습니다.

exit(0)은 프로그램을 종료하는 함수입니다. 
exit(0)은 정상적인 종료를 의미하며, 여기서 0은 종료 코드를 의미합니다.

exit() 함수에는 종료 코드를 전달할 수 있습니다. 
종료 코드는 일반적으로 정수로 표현되며, 
일반적으로 0을 사용하여 정상적인 종료를 나타냅니다.
'''